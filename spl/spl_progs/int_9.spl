alias userSP R0;
userSP=SP;
alias currentPID  R1;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + currentPID * 16 + 13]=userSP;
SP=[PROCESS_TABLE + currentPID * 16 + 11]*512-1;
[PROCESS_TABLE + currentPID * 16 + 9] = 9;

alias file R2;
file = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP-4)%512];
alias counter R6;
counter = 0;
while(counter < MAX_FILE_NUM) do
    if(([INODE_TABLE + counter*16 + 1] == file) && ([INODE_TABLE + counter*16 + 0] == EXEC)) then
			break;
		else
			counter = counter + 1;
		endif;
endwhile;

if(counter==MAX_FILE_NUM) then
    //return value to -1
    print "No File";
    [[PTBR + 2 * (userSP - 1)/ 512]*512 + (userSP-1)%512] = -1;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    SP = userSP;
    ireturn;
endif;

multipush(R0,R1,R2,R3);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0,R1,R2,R3);

alias userPageNum R4;
userPageNum = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];
[MEMORY_FREE_LIST + userPageNum] = [MEMORY_FREE_LIST + userPageNum] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

//Setting the Per-Process resource table
alias perProcessCounter R5;
perProcessCounter = 0;
while (perProcessCounter < 8) do
    [userPageNum * 512 + RESOURCE_TABLE_OFFSET + perProcessCounter] = -1;
    perProcessCounter = perProcessCounter + 2;
endwhile;

SP = userPageNum*512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = counter;

PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20;

//library
//read only
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";


multipush(R0,R1,R2,R3,R4);

// Stack Allocation

R1 = 1;
call MOD_2;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";

R1 = 1;
call MOD_2;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";

// Heap Allocation

R1 = 1;
call MOD_2;
[PTBR+4] = R0;
[PTBR+5] = "0110";

R1 = 1;
call MOD_2;
[PTBR+6] = R0;
[PTBR+7] = "0110";

multipop(R0,R1,R2,R3,R4);

alias iter R7;
alias entry R8;
iter = 8;
entry = 8;

while (iter<12) do
	if([INODE_TABLE + 16*counter + iter]!=-1) then
		multipush(R0,R1,R2,R3,R4,R7,R8);
		R1 = 1;
		call MOD_2;
		[PTBR+entry] = R0;
		[PTBR+entry+1] = "0100";
		// Invoking Disk Load function of Device Manager
		R1 = 2;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = R0;
		R4 = [INODE_TABLE + counter*16 + iter];
		call MOD_4;
		multipop(R0,R1,R2,R3,R4,R7,R8);
	endif;
	iter = iter + 1;
	entry = entry + 2;
endwhile;


[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP=8*512;
ireturn;